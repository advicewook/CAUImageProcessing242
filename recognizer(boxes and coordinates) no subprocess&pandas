import cv2
import pytesseract

pytesseract.pytesseract.tesseract_cmd = r'C:\Users\prant\Documents\School- CAU\Image processing\Assignments\Recognizer\tes\tesseract.exe'

# Custom function to convert an image to grayscale
def custom_grayscale(image):
    height, width, _ = image.shape
    gray = image.copy()[:, :, 0]
    for y in range(height):
        for x in range(width):
            b, g, r = image[y, x]
            gray[y, x] = int(0.114 * b + 0.587 * g + 0.299 * r)
    return gray

# Custom function for binary thresholding
def custom_threshold(image, threshold=128):
    height, width = image.shape
    binary = image.copy()
    for y in range(height):
        for x in range(width):
            binary[y, x] = 255 if image[y, x] > threshold else 0
    return binary

def correct_text(text):
    corrected_text = text.replace('|', 'I')  # Replace misinterpreted characters
    return corrected_text

# Function to highlight a specific word and get its coordinates
def get_word_coordinates(data, word):
    coordinates = []
    n_boxes = len(data['text'])  # Number of detected elements
    for i in range(n_boxes):
        recognized_word = data['text'][i]
        if recognized_word and word.lower() in recognized_word.lower():
            x, y, w, h = (data['left'][i], data['top'][i], data['width'][i], data['height'][i])
            coordinates.append((x, y, w, h))
    return coordinates

# Load the image using OpenCV
image = cv2.imread('text_img2.jpg')
if image is None:
    raise ValueError("Image not found! Check the file path.")

# Convert the image to grayscale using the custom function
gray = custom_grayscale(image)

# Apply binary thresholding using the custom function
binary = custom_threshold(gray, threshold=128)

# Extract text and metadata using Tesseract
raw_text = pytesseract.image_to_string(binary, lang='eng+kor+kor_vert')
text = correct_text(raw_text)
data = pytesseract.image_to_data(binary, output_type='dict')

# Print the full recognized text
print("Recognized Text:\n", text)

# Search for a specific word and get its coordinates
word_to_search = "aviation"  # Replace with the word you want to find
coordinates = get_word_coordinates(data, word_to_search)

# Print the coordinates of the searched word
if coordinates:
    print(f"Coordinates of '{word_to_search}': {coordinates}")
else:
    print(f"The word '{word_to_search}' was not found in the text.")

# Padding value to add to each side
padding = 3  # 3 pixels padding on each side

# Highlight the found words in the image with padding
for (x, y, w, h) in coordinates:
    # Add padding around the bounding box
    x -= padding  # Expand left side
    y -= padding  # Expand top side
    w += 2 * padding  # Expand width (padding on both sides)
    h += 2 * padding  # Expand height (padding on both sides)
    
    # Draw the red box with padding
    cv2.rectangle(image, (x, y), (x + w, y + h), (0, 0, 255), 2)

# Display the processed image with boxes around the searched word
cv2.imshow('Highlighted Words', image)
cv2.waitKey(0)
cv2.destroyAllWindows()
